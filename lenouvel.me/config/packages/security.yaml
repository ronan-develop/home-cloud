security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        App\Entity\User: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        user:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/_ (profiler|wdt)
            security: false
        api:
            pattern: ^/api
            stateless: true
            provider: user
            jwt: ~   
        main:
            json_login:
                check_path: /api/login_check
                username_path: email
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
            jwt: ~
    access_control:
        - { path: ^/api/login, roles: PUBLIC_ACCESS }
        - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }

# ⚠️ IMPORTANT :
# Pour garantir la réussite des tests d’authentification, il est impératif de charger les fixtures
# dans l’environnement de test avec la commande suivante :
#
#     php bin/console doctrine:fixtures:load --env=test --no-interaction
#
# Cela garantit que le mot de passe est haché avec le même coût (cost: 4) que celui utilisé par
# l’environnement de test (voir bloc when@test ci-dessous). Toute divergence de config entre dev, test
# et prod peut provoquer des 401 inattendus.
#
# Si vous utilisez Docker ou un runner CI, exécutez cette commande dans le conteneur PHP de test.
#
# Le mot de passe transmis à /api/login_check doit toujours être en clair (ex: "test"), jamais pré-hashé côté client.
#
# Voir .github/copilot-instructions.md pour les bonnes pratiques de tests et de sécurité.

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
